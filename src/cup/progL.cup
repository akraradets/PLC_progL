/* ----------------------User code--------------------*/

package src;
import java_cup.runtime.*;
import java.util.Hashtable;
import java.util.List;
import java.util.LinkedList;

parser code {:

:};

action code {: 
    Command c = Command.getInstance();
:};
/* ------------Grammar symbol declarations----------- */
// Primitive set
terminal String         PRIMITIVE, LIBRARY;
// TOKEN set
terminal                ASSIGNER, SEPARATOR, LPAREN, RPAREN, LBRANCE, RBRANCE, IF, ELSE, WHILE, FUNCTION, RETURN, COMMA;
// Operation set
terminal                OPER_PLUS, OPER_MINUS, OPER_DIVIDE, OPER_MULTI;
// Conditon set
terminal                COND_AND, COND_OR;
// Comparator set
terminal                COMP_EQUAL, COMP_LESSTHAN, COMP_MORETHAN, COMP_MOREorEQUAL, COMP_LESSorEQUAL;

// Argument set
terminal                ARGRU_NEG;
// LEXEME set
terminal String         VARIABLE;
terminal Object         OBJECT;

non terminal ExpressionNode expression;
non terminal StatementNode  statement,declare_var,declare_func,declare_list;
non terminal ConditionNode  argument, condition, argument_list;
non terminal            initial;

/* Precedences */
precedence left COND_AND,COND_OR,COMP_EQUAL,COMP_LESSTHAN,COMP_MORETHAN,COMP_MOREorEQUAL,COMP_LESSorEQUAL;
precedence left SEPARATOR, ASSIGNER, COMMA;
precedence left OPER_PLUS, OPER_MINUS;
precedence left OPER_DIVIDE, OPER_MULTI;
precedence left IF,LPAREN, RPAREN;

/* ------------Grammar rules----------- */

start with initial;

initial ::= statement:s SEPARATOR           {: System.out.println("DONE"); s.debug(); s.getRoot().run(); :};

statement ::= statement:s1 SEPARATOR statement:s2       {: s1.addChild(s2.getRoot()); RESULT = s2; RESULT.debug(); :}
          | declare_var:d                               {: RESULT = d; :}
          | declare_func:d                              {: RESULT = d; :}
          | RETURN argument:a                           {: RESULT = StatementNode.functionReturn(a); :}
          | IF LPAREN condition:c RPAREN 
            LBRANCE statement:s SEPARATOR RBRANCE       
                                                        {: RESULT = StatementNode.ifthen(c,s); :}
          | IF LPAREN condition:c RPAREN 
            LBRANCE statement:s1 SEPARATOR RBRANCE 
            ELSE LBRANCE statement:s2 SEPARATOR RBRANCE 
                                                        {: RESULT = StatementNode.ifthenelse(c,s1,s2); :}
          | WHILE LPAREN condition:c RPAREN 
            LBRANCE statement:s SEPARATOR RBRANCE 
                                                        {: RESULT = StatementNode.whileloop(c,s); :}
          | VARIABLE:v ASSIGNER argument:a              {: RESULT = StatementNode.assign(v,a); :}
          | VARIABLE:v ASSIGNER VARIABLE:f LPAREN argument_list:a RPAREN 
                                                        {: RESULT = StatementNode.assignFunction(v,f,a); :}
          | LIBRARY:l LPAREN argument:a RPAREN          {: RESULT = StatementNode.library(l,a);:}
          | VARIABLE:v LPAREN argument_list:a RPAREN         {: RESULT = StatementNode.functionCall(v,a);:};

declare_var ::= PRIMITIVE:p VARIABLE:v                        {: RESULT = StatementNode.allocate(p,v);  :}
              | PRIMITIVE:p VARIABLE:v ASSIGNER argument:a    {: RESULT = StatementNode.declare_var(p,v,a); :}
              |                                               {: RESULT = StatementNode.empty(); :};

declare_list ::= declare_list:d1 COMMA declare_var:d2 {: RESULT = StatementNode.declare_list(d1,d2); :}
              | declare_var:d                         {: RESULT = d; :};

declare_func ::= FUNCTION VARIABLE:v LPAREN declare_list:dl RPAREN
                 LBRANCE statement:s SEPARATOR RBRANCE
                                                        {: RESULT = StatementNode.declare_func(v,dl,s); :};

expression ::= expression:e1 OPER_PLUS   expression:e2  {: RESULT = ExpressionNode.add(e1,e2);    :}
             | expression:e1 OPER_MINUS  expression:e2  {: RESULT = ExpressionNode.minus(e1,e2);  :}
             | expression:e1 OPER_DIVIDE expression:e2  {: RESULT = ExpressionNode.divide(e1,e2); :}
             | expression:e1 OPER_MULTI  expression:e2  {: RESULT = ExpressionNode.multi(e1,e2);  :}
             | LPAREN expression:e RPAREN   {: RESULT = e; :}
             | OPER_MINUS expression:e      {: RESULT = ExpressionNode.flipSign(e);     :}
             | OBJECT:o                     {: RESULT = ExpressionNode.readObject(o);   :}
             | VARIABLE:v                   {: RESULT = ExpressionNode.readVariable(v); :}
             |                              {: RESULT = ExpressionNode.readEmpty();     :};


condition ::= condition:c1 COND_AND condition:c2   {: RESULT = ConditionNode.cond_and(c1,c2); :}
            | condition:c1 COND_OR  condition:c2   {: RESULT = ConditionNode.cond_or(c1,c2);  :}
            | condition:c1 COMP_EQUAL condition:c2 {: RESULT = ConditionNode.comp_equal(c1,c2);  :}
            | condition:c1 COMP_LESSTHAN condition:c2 {: RESULT = ConditionNode.comp_lessthan(c1,c2); :}
            | condition:c1 COMP_MORETHAN condition:c2 {: RESULT = ConditionNode.comp_morethan(c1,c2); :}
            | condition:c1 COMP_MOREorEQUAL condition:c2 {: RESULT = ConditionNode.comp_moreORequal(c1,c2); :}
            | condition:c1 COMP_LESSorEQUAL condition:c2 {: RESULT = ConditionNode.comp_lessORequal(c1,c2); :}
            | argument:a                           {: RESULT = a; :};

argument_list ::= argument_list:a1 COMMA argument:a2 {: RESULT = ConditionNode.chainArgument(a1,a2); :}
            | argument:a                             {: RESULT = a; :};

argument ::= ARGRU_NEG argument:a   {: RESULT = ConditionNode.flipArgument(a);   :}         
            | expression:e          {: RESULT = ConditionNode.evalExpression(e); :};