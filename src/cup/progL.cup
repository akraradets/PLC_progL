/* ----------------------User code--------------------*/

package src;
import java_cup.runtime.*;
import java.util.Hashtable;
import java.util.List;
import java.util.LinkedList;

parser code {:

:};

action code {: 
    Command c = Command.getInstance();
:};
/* ------------Grammar symbol declarations----------- */
// Primitive set
terminal String         PRIMITIVE;
// TOKEN set
terminal                ASSIGNER, SEPARATOR, LPAREN, RPAREN, LBRANCE, RBRANCE, IF, ELSE;
// Operation set
terminal                OPER_PLUS, OPER_MINUS, OPER_DIVIDE, OPER_MULTI;
// LEXEME set
terminal String         VARIABLE;
terminal Object         OBJECT;

non terminal ExpressionNode expression;
non terminal DeclareNode    declare;
non terminal PrimObj    type;
non terminal            initial;
non terminal List<Stmt> block;
non terminal Stmt       statement;

/* Precedences */
precedence left SEPARATOR, ASSIGNER;
precedence left OPER_PLUS, OPER_MINUS;
precedence left OPER_DIVIDE, OPER_MULTI;
precedence left IF;

/* ------------Grammar rules----------- */

start with initial;

initial ::= declare:d SEPARATOR expression:e           {: System.out.println("DONE"); d.getRoot().run(); e.getRoot().run(); :};

declare ::= declare:d1 SEPARATOR declare:d2 {: d1.addChild(d2.getRoot()); RESULT = d2; :}
        | VARIABLE:v ASSIGNER expression:e {: RESULT = DeclareNode.declare(v,e); RESULT.debug(); :};

expression ::= expression:e1 OPER_PLUS   expression:e2  {: RESULT = ExpressionNode.add(e1,e2); RESULT.debug(); :}
             | expression:e1 OPER_MINUS  expression:e2  {: RESULT = ExpressionNode.minus(e1,e2); :}
             | expression:e1 OPER_DIVIDE expression:e2  {: RESULT = ExpressionNode.divide(e1,e2); :}
             | expression:e1 OPER_MULTI  expression:e2  {: RESULT = ExpressionNode.multi(e1,e2); :}
             | LPAREN expression:e RPAREN   {: RESULT = e; :}
             | OPER_MINUS expression:e {: RESULT = ExpressionNode.flipSign(e); :}
             | OBJECT:o     {: RESULT = ExpressionNode.readObject(o); RESULT.debug(); :}
             | VARIABLE:v   {: RESULT = ExpressionNode.readVariable(v); RESULT.debug(); :};