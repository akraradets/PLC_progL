/* ----------------------User code--------------------*/

package src;
import java_cup.runtime.*;
import java.util.Hashtable;
import java.util.List;
import java.util.LinkedList;

parser code {:

:};

action code {: 
    Command c = Command.getInstance();
:};
/* ------------Grammar symbol declarations----------- */
// Primitive set
terminal String         PRIMITIVE;
// TOKEN set
terminal                ASSIGNER, SEPARATOR, LPAREN, RPAREN, LBRANCE, RBRANCE, IF, ELSE;
// Operation set
terminal                OPER_PLUS, OPER_MINUS, OPER_DIVIDE, OPER_MULTI;
// LEXEME set
terminal String         VARIABLE;
terminal Object         OBJECT;

non terminal PrimObj    type, expression;
non terminal            initial;
non terminal List<Stmt> block;
non terminal Stmt       statement;

/* Precedences */
precedence left SEPARATOR, ASSIGNER;
precedence left OPER_PLUS, OPER_MINUS;
precedence left OPER_DIVIDE, OPER_MULTI;
precedence left IF;

/* ------------Grammar rules----------- */

start with initial;

initial ::= block:b {: Stmt.run(b); :};

block  ::= block:b statement:s  {: b.add(s); RESULT = b; :}
        | {: RESULT = new LinkedList<Stmt>(); :};

statement ::= SEPARATOR                     {: RESULT = Stmt.empty(); :}
        | LBRANCE block:b RBRANCE           {: Stmt.run(b); RESULT = Stmt.empty(); :}
        | type:p VARIABLE:v SEPARATOR       {: RESULT = Stmt.declare(v,p); :}
        | IF block:b                        {: RESULT = Stmt.ifthen(false,b); :};

type ::= PRIMITIVE:p {: RESULT = PrimObj_Factory.get(p); :};