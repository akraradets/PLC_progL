/* ----------------------User code--------------------*/

package src;
import java_cup.runtime.*;
import java.util.Hashtable;

parser code {:

:};

action code {: 
    // Memory m  = Memory.getInstance();
    Command c = Command.getInstance();
:};
/* ------------Grammar symbol declarations----------- */
// Primitive set
terminal String         PRIMITIVE;
// TOKEN set
terminal                ASSIGNER, SEPARATOR, LPAREN, RPAREN, LBRANCE, RBRANCE, IF, ELSE;
// Operation set
terminal                OPER_PLUS, OPER_MINUS, OPER_DIVIDE, OPER_MULTI;
// LEXEME set
terminal String         VARIABLE;
terminal Object         OBJECT;

non terminal PrimObj    type, expression;
non terminal            initial, declare, statement;

/* Precedences */
precedence left SEPARATOR, ASSIGNER;
precedence left OPER_PLUS, OPER_MINUS;
precedence left OPER_DIVIDE, OPER_MULTI;

/* ------------Grammar rules----------- */

start with initial;

initial ::= statement:s SEPARATOR           {:  :};

statement ::= statement:s1 SEPARATOR statement:s2   {: :}
          | declare:d                               {: :}
          | LBRANCE {: System.out.println("{"); :} RBRANCE {: System.out.println("}"); :}
          | VARIABLE:v ASSIGNER expression:e        {: c.assign(v,e); :};

declare ::= type:p VARIABLE:v                       {: c.declare(v,p);   :}
          | type:p VARIABLE:v1 ASSIGNER expression:e {: c.declare(v1,p,e); :};

type ::= PRIMITIVE:p {: RESULT = PrimObj_Factory.get(p); :};

expression ::= expression:e1 OPER_PLUS   expression:e2  {: RESULT = c.plus(e1,e2); :}
             | expression:e1 OPER_MINUS  expression:e2  {: RESULT = c.minus(e1,e2); :}
             | expression:e1 OPER_DIVIDE expression:e2  {: RESULT = c.divide(e1,e2); :}
             | expression:e1 OPER_MULTI  expression:e2  {: RESULT = c.multiply(e1,e2); :}
             | LPAREN expression:e RPAREN   {: RESULT = e; :}
             | OPER_MINUS expression:e {: RESULT = c.neg_expression(e); :}
             | OBJECT:o     {: RESULT = PrimObj_Factory.get(o); :}
             | VARIABLE:v   {: RESULT = c.load(v); :};
