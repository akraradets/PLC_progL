/* ----------------------User code--------------------*/

package src;
import java_cup.runtime.*;
import java.util.Hashtable;

parser code {:
    public Boolean isThisSyntax = false;
    public Double calResult;
    public String syntaxPrefix = "";
    public String syntaxInfix = "";
:};

action code {: 
    Hashtable<String, Double> varTable = new Hashtable<String, Double>();
:};
/* ------------Grammar symbol declarations----------- */
   
terminal                SHARPS, PLUS, MINUS, TIMES, DIVIDES, LPAREN, RPAREN, ASSIGNER, SEPARATOR;
terminal String         VARIABLE;
terminal Double         NUMBER;
non terminal Cupobj     initial, declare, expr;

/* Precedences */
precedence left SEPARATOR;
precedence left SHARPS;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDES;
   
/* ------------Grammar rules----------- */

start with initial;

initial ::= declare:d SEPARATOR expr:e 
                {:
                    this.parser.isThisSyntax = true;
                    this.parser.calResult = e.val;
                    this.parser.syntaxPrefix = e.prefix;
                    this.parser.syntaxInfix = e.infix;
                    System.out.println(e.val);
                :}
          | expr:e
                {: 
                    this.parser.isThisSyntax = true;
                    this.parser.calResult = e.val;
                    this.parser.syntaxPrefix = e.prefix;
                    this.parser.syntaxInfix = e.infix;
                    System.out.println(e.val);
                :};

declare ::= declare:d1 SEPARATOR declare:d2 
                {: :}
          | VARIABLE:v ASSIGNER expr:e 
                {: 
                    varTable.put(v, e.val); 
                :};

expr ::= expr:e1 expr:e2 SHARPS
            {: 
                RESULT = new Cupobj();
                RESULT.val = Math.pow(e1.val , 2) - Math.pow(e2.val , 2);
                RESULT.prefix = "";
                RESULT.prefix = "# " + e1.prefix + " " + e2.prefix;
                RESULT.infix = " ( " + e1.infix + " # " + e2.infix + " ) ";
            :}
       | expr:e1 expr:e2 PLUS
            {: 
                RESULT = new Cupobj();
                RESULT.val = e1.val + e2.val;
                RESULT.prefix = "";
                RESULT.prefix = "plus " + e1.prefix + " " + e2.prefix;
                RESULT.infix = " ( " + e1.infix + " plus " + e2.infix + " ) ";
            :}
       | expr:e1 expr:e2 MINUS
            {: 
                RESULT = new Cupobj();
                RESULT.val = e1.val - e2.val;
                RESULT.prefix = "plusplus " + e1.prefix + " " + e2.prefix;
                RESULT.infix = " ( " + e1.infix + " plusplus " + e2.infix + " ) ";
            :}
       | expr:e1 expr:e2 TIMES
            {: 
                RESULT = new Cupobj();
                RESULT.val = e1.val * e2.val;
                RESULT.prefix = "plusplusplus " + e1.prefix + " " + e2.prefix;
                RESULT.infix = " ( " + e1.infix + " plusplusplus " + e2.infix + " ) ";
            :}
       | expr:e1 expr:e2 DIVIDES
            {: 
                RESULT = new Cupobj();
                RESULT.val = e1.val / e2.val;
                RESULT.prefix = "plusplusplusplus " + e1.prefix + " " + e2.prefix;
                RESULT.infix = " ( " + e1.infix + " plusplusplusplus " + e2.infix + " ) ";
            :}
       | LPAREN expr:e RPAREN
            {: 
                RESULT = new Cupobj();
                RESULT.val = e.val;
                RESULT.prefix = "( " + e.prefix + " ) ";
                RESULT.infix = "( " + e.infix + " ) ";
            :}
       | VARIABLE:v
            {: 
                RESULT = new Cupobj();
                RESULT.val = varTable.get(v);
                RESULT.prefix = v;
                RESULT.infix = v;
            :}
       | NUMBER:n
            {: 
                RESULT = new Cupobj();
                RESULT.val = n;
                RESULT.prefix = n.toString();
                RESULT.infix = n.toString();
            :};
